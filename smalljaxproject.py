# -*- coding: utf-8 -*-
"""smalljaxproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13pg2jTPV2ipfxuFTXvccjpA_PdQpvz_k

# Load the MNIST Dataset
"""

import tensorflow_datasets as tfds

ds_builder = tfds.builder("mnist")
ds_builder.download_and_prepare()
train_ds = tfds.as_numpy(ds_builder.as_dataset(split="train", batch_size=-1))
test_ds = tfds.as_numpy(ds_builder.as_dataset(split="test", batch_size=-1))

X_train, y_train = train_ds["image"], train_ds["label"]
X_test, y_test = test_ds["image"], test_ds["label"]

# Normalize and flatten
X_train = X_train.reshape(-1, 28*28) / 255.0
X_test = X_test.reshape(-1, 28*28) / 255.0

"""#Initialize Weights"""

import jax.numpy as jnp
from jax import random

def init_params(key):
    keys = random.split(key, 2)
    params = {
        "W1": random.normal(keys[0], (784, 128)) * 0.01,
        "b1": jnp.zeros((128,)),
        "W2": random.normal(keys[1], (128, 10)) * 0.01,
        "b2": jnp.zeros((10,))
    }
    return params

"""# Forward Pass"""

def relu(x):
    return jnp.maximum(0, x)

def softmax(x):
    exp_x = jnp.exp(x - jnp.max(x))
    return exp_x / jnp.sum(exp_x)

def predict(params, x):
    h1 = relu(jnp.dot(x, params["W1"]) + params["b1"])
    out = jnp.dot(h1, params["W2"]) + params["b2"]
    return softmax(out)

"""# Loss Function"""

def cross_entropy(preds, labels):
    one_hot = jnp.eye(10)[labels]
    return -jnp.sum(one_hot * jnp.log(preds + 1e-7))

def loss_fn(params, x, y):
    preds = predict(params, x)
    return cross_entropy(preds, y)

"""# Gradient Descent"""

from jax import grad

loss_grad = grad(loss_fn)

def update(params, x, y, lr=0.01):
    grads = loss_grad(params, x, y)
    return {k: params[k] - lr * grads[k] for k in params}

"""# Training Loop"""

key = random.PRNGKey(0)
params = init_params(key)

for epoch in range(1000):
    i = epoch % len(X_train)
    params = update(params, X_train[i], y_train[i])
    if epoch % 100 == 0:
        acc = jnp.mean(jnp.argmax(predict(params, X_test), axis=1) == y_test)
        print(f"Epoch {epoch}, Accuracy: {acc:.4f}")

